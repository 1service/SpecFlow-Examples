// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.2.0.0
//      Runtime Version:2.0.50727.4927
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace BookShop.Specs.Web
{
    using TechTalk.SpecFlow;
    
    
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Shopping cart")]
    public partial class ShoppingCartFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "02_ShopingCart.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Shopping cart", "As a potential customer\r\nI want to place books into my shopping basket\r\nSo that I" +
                    " can order several books at once.", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Price"});
            table1.AddRow(new string[] {
                        "Book1",
                        "Martin Fowler",
                        "Patterns of Enterprise Architecture",
                        "10,05"});
            table1.AddRow(new string[] {
                        "Book2",
                        "Eric Evans",
                        "Domain Driven Design",
                        "15,10"});
            table1.AddRow(new string[] {
                        "Book3",
                        "Ted Pattison",
                        "Inside Windows SharePoint Services",
                        "9,75"});
#line 7
 testRunner.Given("the following books", ((string)(null)), table1);
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Books should be placed into basket")]
        public virtual void BooksShouldBePlacedIntoBasket()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Books should be placed into basket", ((string[])(null)));
#line 13
  this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have a basket with: Book1");
#line 15
 testRunner.When("I place Book2 into the basket");
#line 16
 testRunner.Then("my shopping cart should contain 2 items");
#line 17
 testRunner.And("my basket should contain exactly 1 Book1");
#line 18
 testRunner.And("my basket should contain exactly 1 Book2");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basket should initially be empts")]
        public virtual void BasketShouldInitiallyBeEmpts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basket should initially be empts", ((string[])(null)));
#line 20
  this.ScenarioSetup(scenarioInfo);
#line 21
  testRunner.When("I enter the shop");
#line 22
  testRunner.Then("my shopping cart should contain 0 items");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
